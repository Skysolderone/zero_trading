// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: trading.proto

package trading

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradingService_SetTradingSignal_FullMethodName = "/trading.TradingService/SetTradingSignal"
	TradingService_GetTrading_FullMethodName       = "/trading.TradingService/GetTrading"
)

// TradingServiceClient is the client API for TradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingServiceClient interface {
	SetTradingSignal(ctx context.Context, in *SetTradingSignalRequest, opts ...grpc.CallOption) (*SetTradingSignalResponse, error)
	GetTrading(ctx context.Context, in *GetTradingRequest, opts ...grpc.CallOption) (*GetTradingResponse, error)
}

type tradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingServiceClient(cc grpc.ClientConnInterface) TradingServiceClient {
	return &tradingServiceClient{cc}
}

func (c *tradingServiceClient) SetTradingSignal(ctx context.Context, in *SetTradingSignalRequest, opts ...grpc.CallOption) (*SetTradingSignalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTradingSignalResponse)
	err := c.cc.Invoke(ctx, TradingService_SetTradingSignal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetTrading(ctx context.Context, in *GetTradingRequest, opts ...grpc.CallOption) (*GetTradingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTradingResponse)
	err := c.cc.Invoke(ctx, TradingService_GetTrading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServiceServer is the server API for TradingService service.
// All implementations must embed UnimplementedTradingServiceServer
// for forward compatibility.
type TradingServiceServer interface {
	SetTradingSignal(context.Context, *SetTradingSignalRequest) (*SetTradingSignalResponse, error)
	GetTrading(context.Context, *GetTradingRequest) (*GetTradingResponse, error)
	mustEmbedUnimplementedTradingServiceServer()
}

// UnimplementedTradingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradingServiceServer struct{}

func (UnimplementedTradingServiceServer) SetTradingSignal(context.Context, *SetTradingSignalRequest) (*SetTradingSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTradingSignal not implemented")
}
func (UnimplementedTradingServiceServer) GetTrading(context.Context, *GetTradingRequest) (*GetTradingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrading not implemented")
}
func (UnimplementedTradingServiceServer) mustEmbedUnimplementedTradingServiceServer() {}
func (UnimplementedTradingServiceServer) testEmbeddedByValue()                        {}

// UnsafeTradingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingServiceServer will
// result in compilation errors.
type UnsafeTradingServiceServer interface {
	mustEmbedUnimplementedTradingServiceServer()
}

func RegisterTradingServiceServer(s grpc.ServiceRegistrar, srv TradingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTradingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradingService_ServiceDesc, srv)
}

func _TradingService_SetTradingSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTradingSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).SetTradingSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_SetTradingSignal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).SetTradingSignal(ctx, req.(*SetTradingSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingService_GetTrading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetTrading(ctx, req.(*GetTradingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingService_ServiceDesc is the grpc.ServiceDesc for TradingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading.TradingService",
	HandlerType: (*TradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTradingSignal",
			Handler:    _TradingService_SetTradingSignal_Handler,
		},
		{
			MethodName: "GetTrading",
			Handler:    _TradingService_GetTrading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trading.proto",
}
