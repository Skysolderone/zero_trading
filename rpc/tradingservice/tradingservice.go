// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: trading.proto

package tradingservice

import (
	"context"

	"ws_trading/rpc/trading"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetTradingRequest        = trading.GetTradingRequest
	GetTradingResponse       = trading.GetTradingResponse
	SetTradingSignalRequest  = trading.SetTradingSignalRequest
	SetTradingSignalResponse = trading.SetTradingSignalResponse

	TradingService interface {
		SetTradingSignal(ctx context.Context, in *SetTradingSignalRequest, opts ...grpc.CallOption) (*SetTradingSignalResponse, error)
		GetTrading(ctx context.Context, in *GetTradingRequest, opts ...grpc.CallOption) (*GetTradingResponse, error)
	}

	defaultTradingService struct {
		cli zrpc.Client
	}
)

func NewTradingService(cli zrpc.Client) TradingService {
	return &defaultTradingService{
		cli: cli,
	}
}

func (m *defaultTradingService) SetTradingSignal(ctx context.Context, in *SetTradingSignalRequest, opts ...grpc.CallOption) (*SetTradingSignalResponse, error) {
	client := trading.NewTradingServiceClient(m.cli.Conn())
	return client.SetTradingSignal(ctx, in, opts...)
}

func (m *defaultTradingService) GetTrading(ctx context.Context, in *GetTradingRequest, opts ...grpc.CallOption) (*GetTradingResponse, error) {
	client := trading.NewTradingServiceClient(m.cli.Conn())
	return client.GetTrading(ctx, in, opts...)
}
